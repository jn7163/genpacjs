#! /usr/bin/env node
// -*- js -*-
const fs = require('fs');
const path = require('path');
const readline = require('readline');

const yargs = require('yargs');

const utils = require('../src/utils');
const GenPAC = require('../src/index');
const packageInfo = require('../package.json');

const CONFIG_SAMPLE = 'config-sample.ini';
const USER_RULE_SAMPLE = 'user-rules-sample.txt';

const { argv } = yargs
    .usage('Usage: genpac [options]')
    .help('help')
    .alias('h', 'help')
    .version(packageInfo.version)
    .alias('v', 'version')
    .option('proxy', {
        alias: 'p',
        type: 'string',
        description: 'PAC文件中使用的代理信息',
    })
    .option('gfwlist-url', {
        type: 'string',
        default: 'https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt',
        description: 'gfwlist 地址，一般不需要更改',
    })
    .option('gfwlist-proxy', {
        type: 'string',
        description: '获取 gfwlist 时的代理设置，如果你可以正常访问 gfwlist，则无必要使用该选项',
    })
    .option('gfwlist-local', {
        type: 'string',
        description: '本地 gfwlist 文件地址，当在线地址获取失败时使用',
    })
    .option('update-gfwlist-local', {
        type: 'boolean',
        default: true,
        description:
            '当在线 gfwlist 成功获取且 --gfwlist-local 存在时，默认会将在线内容覆盖到本地，此项设置后则不覆盖',
    })
    .option('user-rule', {
        type: 'array',
        description: '自定义规则，该选项允许重复使用',
    })
    .option('user-rule-from', {
        type: 'array',
        description: '从文件中读取自定义规则，该选项允许重复使用',
    })
    .option('config-from', {
        type: 'string',
        description: '从文件中读取配置信息',
    })
    .option('output', {
        alias: 'o',
        type: 'string',
        description: '输出生成的文件，如果没有此选项，将直接打印结果',
    })
    .option('compress', {
        alias: 'z',
        type: 'boolean',
        default: false,
        description: '压缩输出',
    })
    .option('base64', {
        type: 'boolean',
        default: false,
        description: 'base64加密输出，注意：部分浏览器并不支持经过base64加密的pac文件',
    })
    .option('init', {
        type: 'string',
        description: '初始化配置和用户规则文件',
    });

if (typeof argv.init === 'string') {
    try {
        const initPath = utils.abspath(argv.init || '.');
        if (!fs.existsSync(initPath) || !fs.statSync(initPath).isDirectory()) {
            fs.mkdirSync(initPath);
        }
        const configDst = path.join(initPath, 'config.ini');
        const userRuleDst = path.join(initPath, 'user-rules.txt');
        function writeConfigFile() {
            fs.copyFileSync(utils.pkgdata(CONFIG_SAMPLE), configDst);
            fs.copyFileSync(utils.pkgdata(USER_RULE_SAMPLE), userRuleDst);
            console.log('init success');
            process.exit();
        }
        if (fs.existsSync(configDst) || fs.existsSync(userRuleDst)) {
            const rl = readline.createInterface({
                input: process.stdin,
                output: process.stdout,
            });

            rl.question('file already exists, overwrite?[y|n]: ', (answer) => {
                if (answer.toLowerCase() !== 'y') {
                    throw new Error('file already exists.');
                } else {
                    rl.close();
                    writeConfigFile();
                }
            });
        } else {
            writeConfigFile();
        }
    } catch (error) {
        console.log(`init fail: ${error}`);
        process.exit(1);
    }
} else {
    const {
        proxy,
        'gfwlist-url': gfwlistURL,
        'gfwlist-proxy': gfwlistProxy,
        'gfwlist-local': gfwlistLocal,
        'update-gfwlist-local': updateGFWListLocal,
        'user-rule': userRule,
        'user-rule-from': userRuleFrom,
        'config-from': configFrom,
        output,
        compress,
        base64,
    } = argv;

    const genpac = new GenPAC({
        proxy,
        output,
        gfwlistURL,
        gfwlistProxy,
        gfwlistLocal,
        updateGFWListLocal,
        userRule,
        userRuleFrom,
        configFrom,
        compress,
        base64,
    });

    genpac.generate();
}
